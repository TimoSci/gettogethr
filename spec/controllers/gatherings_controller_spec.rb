require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GatheringsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Gathering. As you add validations to Gathering, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { title: 'A Gathering to Remember' }
  }

  let(:invalid_attributes) {
    { name: 'Gatherings Do Not Have Names', date: 'No Dates, Either', type: 'Not Even Types' }
  }

  let(:user) {
    User.create(name: 'Rspec Testman', password: 'password', email: 'test@example.com')
  }

  let(:valid_user_attributes) {
    { email: 'test@example.com', password: 'password' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GatheringsController. Be sure to keep this updated too.
  let(:valid_session) {
    new_user = user
    { user_id: user.id }
    }

  describe "GET #index" do
    it "assigns all gatherings as @gatherings" do
      gathering = Gathering.create! valid_attributes
      gathering.user = user
      gathering.save
      get :index, {}, valid_session
      expect(assigns(:gatherings)).to eq([gathering])
    end
  end

  # describe "GET #show" do
  #   it "assigns the requested gathering as @gathering" do
  #     gathering = Gathering.create! valid_attributes
  #     get :show, {:id => gathering.to_param}, valid_session
  #     expect(assigns(:gathering)).to eq(gathering)
  #   end
  # end

  # describe "GET #new" do
  #   it "assigns a new gathering as @gathering" do
  #     get :new, {}, valid_session
  #     expect(assigns(:gathering)).to be_a_new(Gathering)
  #   end
  # end

  # describe "GET #edit" do
  #   it "assigns the requested gathering as @gathering" do
  #     gathering = Gathering.create! valid_attributes
  #     get :edit, {:id => gathering.to_param}, valid_session
  #     expect(assigns(:gathering)).to eq(gathering)
  #   end
  # end

  # describe "POST #create" do
  #   context "with valid params" do
  #     it "creates a new Gathering" do
  #       expect {
  #         post :create, {:gathering => valid_attributes}, valid_session
  #       }.to change(Gathering, :count).by(1)
  #     end

  #     it "assigns a newly created gathering as @gathering" do
  #       post :create, {:gathering => valid_attributes}, valid_session
  #       expect(assigns(:gathering)).to be_a(Gathering)
  #       expect(assigns(:gathering)).to be_persisted
  #     end

  #     it "redirects to the created gathering" do
  #       post :create, {:gathering => valid_attributes}, valid_session
  #       expect(response).to redirect_to(Gathering.last)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns a newly created but unsaved gathering as @gathering" do
  #       post :create, {:gathering => invalid_attributes}, valid_session
  #       expect(assigns(:gathering)).to be_a_new(Gathering)
  #     end

  #     it "re-renders the 'new' template" do
  #       post :create, {:gathering => invalid_attributes}, valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested gathering" do
  #       gathering = Gathering.create! valid_attributes
  #       put :update, {:id => gathering.to_param, :gathering => new_attributes}, valid_session
  #       gathering.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested gathering as @gathering" do
  #       gathering = Gathering.create! valid_attributes
  #       put :update, {:id => gathering.to_param, :gathering => valid_attributes}, valid_session
  #       expect(assigns(:gathering)).to eq(gathering)
  #     end

  #     it "redirects to the gathering" do
  #       gathering = Gathering.create! valid_attributes
  #       put :update, {:id => gathering.to_param, :gathering => valid_attributes}, valid_session
  #       expect(response).to redirect_to(gathering)
  #     end
  #   end

  #   context "with invalid params" do
  #     it "assigns the gathering as @gathering" do
  #       gathering = Gathering.create! valid_attributes
  #       put :update, {:id => gathering.to_param, :gathering => invalid_attributes}, valid_session
  #       expect(assigns(:gathering)).to eq(gathering)
  #     end

  #     it "re-renders the 'edit' template" do
  #       gathering = Gathering.create! valid_attributes
  #       put :update, {:id => gathering.to_param, :gathering => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE #destroy" do
  #   it "destroys the requested gathering" do
  #     gathering = Gathering.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => gathering.to_param}, valid_session
  #     }.to change(Gathering, :count).by(-1)
  #   end

  #   it "redirects to the gatherings list" do
  #     gathering = Gathering.create! valid_attributes
  #     delete :destroy, {:id => gathering.to_param}, valid_session
  #     expect(response).to redirect_to(gatherings_url)
  #   end
  # end

end
